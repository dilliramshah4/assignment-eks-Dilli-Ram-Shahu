name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - 'k8s/**'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build Backend Docker image
      if: contains(github.event.head_commit.modified, 'backend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cd backend
        docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:backend-$GITHUB_SHA .
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:backend-$GITHUB_SHA
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    - name: Build Frontend Docker image
      if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cd frontend
        docker build -t $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:frontend-$GITHUB_SHA .
        docker push $ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:frontend-$GITHUB_SHA
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}

    - name: Deploy Backend to EKS
      if: contains(github.event.head_commit.modified, 'backend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cat > backend-deployment-ci.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ secrets.BACKEND_DEPLOYMENT_NAME }}
          namespace: ${{ secrets.NAMESPACE }}
        spec:
          replicas: ${{ secrets.BACKEND_REPLICAS }}
          selector:
            matchLabels:
              app: ${{ secrets.BACKEND_APP_LABEL }}
          template:
            metadata:
              labels:
                app: ${{ secrets.BACKEND_APP_LABEL }}
              annotations:
                prometheus.io/scrape: "true"
                prometheus.io/port: "${{ secrets.BACKEND_PORT }}"
                prometheus.io/path: "/metrics"
            spec:
              containers:
              - name: backend
                image: ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:backend-GITHUB_SHA
                ports:
                - containerPort: ${{ secrets.BACKEND_PORT }}
                env:
                - name: DB_HOST
                  value: "${{ secrets.DB_HOST }}"
                - name: DB_USER
                  value: "${{ secrets.DB_USER }}"
                - name: DB_PASSWORD
                  value: "${{ secrets.DB_PASSWORD }}"
                - name: DB_NAME
                  value: "${{ secrets.DB_NAME }}"
                - name: PORT
                  value: "${{ secrets.BACKEND_PORT }}"
        EOF
        
        sed -i "s|ECR_REGISTRY|$ECR_REGISTRY|g" backend-deployment-ci.yaml
        sed -i "s|GITHUB_SHA|$GITHUB_SHA|g" backend-deployment-ci.yaml
        
        kubectl apply -f backend-deployment-ci.yaml
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    - name: Deploy Frontend to EKS
      if: contains(github.event.head_commit.modified, 'frontend/') || github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
      run: |
        cat > frontend-deployment-ci.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${{ secrets.FRONTEND_DEPLOYMENT_NAME }}
          namespace: ${{ secrets.NAMESPACE }}
        spec:
          replicas: ${{ secrets.FRONTEND_REPLICAS }}
          selector:
            matchLabels:
              app: ${{ secrets.FRONTEND_APP_LABEL }}
          template:
            metadata:
              labels:
                app: ${{ secrets.FRONTEND_APP_LABEL }}
            spec:
              containers:
              - name: frontend
                image: ECR_REGISTRY/${{ secrets.ECR_REPOSITORY }}:frontend-GITHUB_SHA
                ports:
                - containerPort: ${{ secrets.FRONTEND_PORT }}
        EOF
        
        sed -i "s|ECR_REGISTRY|$ECR_REGISTRY|g" frontend-deployment-ci.yaml
        sed -i "s|GITHUB_SHA|$GITHUB_SHA|g" frontend-deployment-ci.yaml
        
        kubectl apply -f frontend-deployment-ci.yaml
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}

    - name: Verify Deployment
      run: |
        echo "Waiting for deployments to complete..."
        kubectl rollout status deployment/${{ secrets.BACKEND_DEPLOYMENT_NAME }} -n ${{ secrets.NAMESPACE }} --timeout=300s || true
        kubectl rollout status deployment/${{ secrets.FRONTEND_DEPLOYMENT_NAME }} -n ${{ secrets.NAMESPACE }} --timeout=300s || true
        
        echo "Current pod status:"
        kubectl get pods -n ${{ secrets.NAMESPACE }}
        
        echo "Service endpoints:"
        kubectl get svc -n ${{ secrets.NAMESPACE }}
